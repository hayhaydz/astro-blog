---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { marked } from 'marked';

export async function getStaticPaths() {
    const query  =  await fetch(`${import.meta.env.PUBLIC_API_URL}/graphql`, {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({
    query: `
    query Posts{
        posts {
            data {
                attributes {
                    slug
                }
            }
        }
    }
    `})}).then(res => res.json());
    return  query.data.posts.data.map(post =>  ({ params : { slug: post.attributes.slug } }));
}

const { slug } =  Astro.params
const queryItem = await fetch(`${import.meta.env.PUBLIC_API_URL}/graphql`, {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({
    query: `
        query Posts($slug: String) {
            posts(filters: { slug: { eq: $slug }}) {
                data {
                    attributes {
                        title,
                        content,
                        createdAt,
                        updatedAt,
                        readingTime,
                        slug,
                        coverImage {
                            data {
                                attributes {
                                    formats
                                }
                            }
                        },
                        author {
                            data {
                                attributes {
                                    name,
                                    picture {
                                        data {
                                            attributes {
                                                formats
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    `,
    variables: {
        slug: slug
    }
})
}).then(x  => x.json());

const post = queryItem.data.posts.data[0].attributes;
const content = marked.parse(post.content);
---

<html lang="en">
	<head>
		<BaseHead title={post.title} description={post.excerpt} />
		<style>
			.title {
				font-size: 2em;
				margin: 0.25em 0 0;
			}
			hr {
  				border-top: 1px solid #DDD;
				margin: 1rem 0;
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				{post.coverImage.data.attributes.formats.large.url && (
					<img
						width={720}
						height={360}
						src={post.coverImage.data.attributes.formats.large.url}
						alt=""
					/>
				)}
				<h1 class="title">{post.title}</h1>
				{post.createdAt && <time>{post.createdAt}</time>}
				{post.updatedAt && <div>Last updated on <time>{post.updatedAt}</time></div>}
				<hr/>
                <p set:html={content}/>
			</article>
		</main>
		<Footer />
	</body>
</html>